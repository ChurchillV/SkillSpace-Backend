generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change to "mysql" or "sqlite" if using a different DB
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  firstname  String
  lastname   String
  othernames String?
  contact    String   @unique
  email      String   @unique
  password   String
  interests  Interest[]  @relation("UserInterests")
  photo      String?
  registrations Registration[]
  attendanceRecords   Attendee[]
}

model Interest {
  id    String @id @default(uuid())
  name  String @unique
  users User[] @relation("UserInterests")
}

model Organizer {
  id                String   @id @default(uuid())
  name              String
  description       String?
  photo            String?
  email             String   @unique
  contact           String   @unique
  password          String
  website           String?
  workshopCategories Tag[]  @relation("OrganizerTags")
  workshops         Workshop[]
}

model Workshop {
  id                 String       @id @default(uuid())
  name               String
  summary            String?
  description        String?
  photo             String?
  date              DateTime
  venue             String
  isRecurring       Boolean      @default(false)
  isVirtual         Boolean      @default(false)
  meetingLink       String?
  chatLink          String
  tags              Tag[]        @relation("WorkshopTags")
  recurrenceDetails RecurrenceDetail[]
  reviews           Review[]
  attendees         Attendee[]     
  registrants       Registration[]
  organizerId       String
  organizer         Organizer     @relation(fields: [organizerId], references: [id])
}

model Tag {
  id         String   @id @default(uuid())
  name       String   @unique
  workshops  Workshop[] @relation("WorkshopTags")
  organizers Organizer[] @relation("OrganizerTags")
}

model Attendee {
  userId     String
  workshopId String
  user       User     @relation(fields: [userId], references: [id])
  workshop   Workshop @relation(fields: [workshopId], references: [id])
  
  @@id([userId, workshopId]) // âœ… Composite primary key for efficiency
}

model RecurrenceDetail {
  id         String   @id @default(uuid())
  date       DateTime
  time       String
  workshopId String
  workshop   Workshop @relation(fields: [workshopId], references: [id])
}

model Review {
  id        String  @id @default(uuid())
  workshopId String
  workshop   Workshop @relation(fields: [workshopId], references: [id])
  rating    Int
  feedback  String?
}

model Registration {
  id         String   @id @default(uuid())
  userId     String?  // Nullable, required for only registered users
  user       User?     @relation(fields: [userId], references: [id])
  workshopId String
  workshop   Workshop @relation(fields: [workshopId], references: [id])

  // Fields for guests (optional if the userId exists)
  firstname  String?
  lastname   String?
  email      String?
  contact    String?
}
